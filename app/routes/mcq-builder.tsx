import Select from 'react-select';
import { useEffect, useState } from 'react';
import McqPoolBuilder from '../components/mcqPoolBuilder'
import McqNonPoolBuilder from '~/components/mcqNonPoolBuilder';
import stylesUrl from "~/styles/mcq-builder.css";
import { ActionFunction, LinksFunction } from '@remix-run/node';

import { authenticator } from "../utils/auth.server";
import { Form, useActionData, useLoaderData } from '@remix-run/react';

//import { GoogleSpreadsheet } from 'google-spreadsheet';
//import "dotenv/config";


export const links: LinksFunction = () => {
    return [{ rel: "stylesheet", href: stylesUrl }];
};

const poolTypesArray = [{ "value": "POOL", "label": "Pool" },
{ "value": "NON_POOL", "label": "Non Pool" }]

// export const loader = async ({ request }) => {
//     // authenticator.isAuthenticated function returns the user object if found
//     // if user is not authenticated then user would be redirected back to homepage ("/" route)
//     const user = await authenticator.isAuthenticated(request, {
//         failureRedirect: "/",
//     });

//     return {
//         user,
//     };
// };

// export const action: ActionFunction = async ({
//     request,
// }) => {
//     const form = await request.formData();

//     const sheetId = form.get("sheetId")
//     const subsheetName = form.get("subsheetName")
//     const reportedTo = form.get("reportedTo")

//     const doc = new GoogleSpreadsheet('1WpZhSD9_bXm1whI6ooc23wAqYumEaGiS7WwwDzlScZ8');

//     await doc.useServiceAccountAuth({
//         // env var values are copied from service account credentials generated by google
//         // see "Authentication" section in docs for more info
//         //TODO:Need to change
//         client_email: "mcqbot@mcq-comments-db.iam.gserviceaccount.com",
//         private_key: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDQRXXbVaYsPHDP\nQuSpqpIVvjalNR6n/aQkupBf+IPbSDRz6ZST21ulu9kSonH6y9vWUlXc1zw+01uw\njcyeboe7yDrVE9K57rTcgw52GDNheHucj5NPaVHNaCCtD/mtvKFtZtA2N8Kd/vSZ\noC8ZKC3wLMTKffANOtuWQoEir47lxOmEtoekhhe+9ElI6e77AqtbH6bUi0YWY4La\nXYuzTSkOXolpKUb7dzZDUqGojPG3WasmhrsMP4isDm0VY3ltnNkJydwY9WGkl/yo\n5fn5v2k4wMqvgzZ2ngesy0yB4YrNQ2I2hYUfjceoSk4KjOCOR3vr4xYFPI8ZHnkD\nuXCLNrUNAgMBAAECggEAUiCB2ArPKzRuO5yiNLF5R6+pNr5ap13ig0U6N031GNxB\nKtAZ8bAXVKRddfauwXnv53SyPRJ2xENuLZHM9VCan5bWdD2L5BvYH/hiFHl4kWAE\nRnlrWm4qfrgn4nahOzxd35kiU67rRIhMBeRfjikE7GeK9lpw9ZaXDoqNB5N44uts\nFz4EuHypScqr0c3XnoIi9aS7FtzoFIQjykH5/9cB2l3gJ+yYrWDGqOYT5SAb8iXG\n0gQ82kXrNSMVm4Rtch6VJ3iGMSPJHBqQlxc2YxKW42KB7aGmtEK+tDjgh7mF1icp\noe+1zLdyVdpdKJ7I+GeYZKJ+pHFPnJTkCbmjvlNctQKBgQDprnvBXEBMiZTuVSQB\nyG9/xH/baqU55O7NL/dCmM4XdVCmaSVZLk9DbJv2LFWozZA7n13JsNbTyzbG8wFL\n+4XvYzM/cdBxmxWdGLtc27ZcjxjrzD5pOtKdwRH/KBlhsoCgNaAIELsr8jtAbwPf\n86uAm/1P0fsHUj+Lh6m5uZUnOwKBgQDkKbI7I1biQVRS6e4SPg7uSttDRSCxCMUX\n8t+671DwjsjRLmM8+uW3hmYHA64YqKDNOwgvX4/XHN6inJpf3JQSacxvNSgQwfYv\n4RSUAEIbtcvqVnMb2SV/vnUr3NFJzq7UQlySH6kP5TRMq0vOrQxyOJmOEE7km1Q/\nc07FWe0gVwKBgEYjyCOOpAIVHa23wnoChm0MNvBN/0/0RjUyW34SzXE/FjkMwFgX\nTVVIiTuHrSJgqRUsTYNXX/PsQAHROKds1JO46830RIOE8CTaIorJq9/2V52XDXia\nXlNZeyRiDdRENtVfoywokXWsXFqHt9sFkYmlyI+n0DgvWMFxs+D6Mim3AoGAfuNN\ncqQZqqSIX8AnHVAT/6PzwrqMDsiAy+vPTufOzKmrtuGkYQJrhKAi153NUXteSiSd\nTbNIjGpKyoZrOAq08nSSM/qM+JzV7BSx3Ak0urJk4EMJqyAdQajLAwTAA9sE0ZjC\nYKVo4SUn68eL1jnY5SDjDOW26l4UAWGAGjMDs+sCgYEA6U/CfBhaKmb8msq8egsn\n61xmjpo0DvNbNDGNXBnyMARvnnPcSZB3RRvjELrXCnIRF5jnjaKtKUnWoA9hW4Qg\nAA3djGf+ArG3DoWWZqOyo9aHuM3OpFJWkXEwjBT4vshbsnEebWCZXnGRlA269v+M\niP/M74zvpY2riB2uch/pqLE=\n-----END PRIVATE KEY-----\n".replace(/\\n/gm, '\n')
//     });

//     await doc.loadInfo(); // loads document properties and worksheets

//     const sheet = doc.sheetsByTitle[subsheetName]

//     if (sheet) {
//         const rows = await sheet.getRows();

//         // rows.map(async (eachRowObj, index) => {
//         //     eachRowObj[index+1][4] = "done"
//         //     await sheet.saveUpdatedCells();
//         // })
//         await sheet.loadCells();

//         let cell = sheet.getCell(1, 3)
//         cell.value = "done"

//         await sheet.saveUpdatedCells();

//         const rowsData = rows.map(eachObj => {
//             const commentsObj = {}
//             const headerValues = eachObj["_sheet"].headerValues
//             headerValues.forEach(eachHeaderValue => {
//                 commentsObj[eachHeaderValue] = eachObj[eachHeaderValue]
//             })
//             return commentsObj
//         })

//         console.log(rowsData, 'rowsData')

//     }
//     else {
//         const newSheet = await doc.addSheet({ title: subsheetName, headerValues: ['questionKey', 'issue', "issueReportedTo", "status"] });
//         const moreRows = await sheet.addRows([
//             { questionKey: 'Sergey Brin', issue: 'sergey@google.com', issueReportedTo: "preethi", status: "" },
//             { questionKey: 'Eric Schmidt', issue: 'eric@google.com', issueReportedTo: "preethi", status: "" },
//         ]);
//     }

//     return null
// }


// export default function McqBuilder() {
//     const actionData = useActionData<ActionData>();

//     const { user } = useLoaderData();
//     const [sheetId, setSheetId] = useState("1WpZhSD9_bXm1whI6ooc23wAqYumEaGiS7WwwDzlScZ8");
//     const [subsheetName, setSubsheetName] = useState("Patterns")
//     const [reportedTo, setReportedTo] = useState("preethi")

//     const onChangeSheetId = (event) => {
//         setSheetId(event.target.value)
//     }
//     const onChangeSubsheetName = (event) => {
//         setSubsheetName(event.target.value)
//     }
//     const onChangeReportedTo = (event) => {
//         setReportedTo(event.target.value)
//     }

//     return (
//         <div className="responsive-container">
//             <Form method="post">
//                 <input name="sheetId" value={sheetId} onChange={onChangeSheetId} />
//                 <input name="subsheetName" value={subsheetName} onChange={onChangeSubsheetName} />
//                 <input name="reportedTo" value={reportedTo} onChange={onChangeReportedTo} />
//                 <button>Submit</button>
//             </Form>

//         </div>
//     );
// }

export default function McqBuilder() {
    const [poolType, setPoolType] = useState(poolTypesArray[0])
    const [pyodideInstance, setPyodideInstance] = useState()

    useEffect(() => {
        async function createAndReturnPyodideInstance() {
            let pyodide = await loadPyodide();
            return pyodide;
        }
        const instance = createAndReturnPyodideInstance()
        setPyodideInstance(instance)
    }, [])

    const onChangePoolType = (selectedOption) => {
        setPoolType(selectedOption)
    }

    return (
        <div className="responsive-container">
            <p className='app-heading'>
                MCQ Builder
            </p>
            <Select
                value={poolType}
                onChange={onChangePoolType}
                options={poolTypesArray}
                placeholder="Type of MCQ Builder"
                isMulti={false}
                className="react-select"
            />
            {poolType.value === poolTypesArray[0].value ? <McqPoolBuilder pyodideInstance={pyodideInstance} /> : <McqNonPoolBuilder pyodideInstance={pyodideInstance} />}
        </div>
    );
}